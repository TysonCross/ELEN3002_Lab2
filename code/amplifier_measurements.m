%% Import data from text file.
% Script for importing data from the following text file:
%
%    /Users/Tyson/Documents/Academic/ELEN3002/Labs/lab2/measurements/MultiSim_simulation_Amplifier_2V.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2018/04/18 21:25:27

clc; clear all;

%% Initialize variables.
filename = '/Users/Tyson/Documents/Academic/ELEN3002/Labs/lab2/measurements/MultiSim_simulation_Amplifier_2V.csv';
delimiter = ',';
startRow = 2;

%% Format string for each line of text:
%   column1: double (%f)
%	column2: double (%f)
%   column3: text (%s)
%	column4: double (%f)
%   column5: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%f%s%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'EmptyValue' ,NaN,'HeaderLines' ,startRow-1, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
start_val = 4985;
XTrace1 = dataArray{:, 1}(start_val:21600)*1000;
V_source = dataArray{:, 2}(start_val:21600);
XTrace2 = dataArray{:, 4}(start_val:21600)*1000;
V_out = dataArray{:, 5}(start_val:21600);

XTrace1=XTrace1-XTrace1(1);
XTrace2=XTrace2-XTrace2(1);

V_S_mag = abs(max(V_source))+abs(min(V_source))
V_O_mag = abs(max(V_out))+abs(min(V_out))
H_t = V_O_mag/V_S_mag

%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans;

%% Figure settings
scr = get(groot,'ScreenSize');                              % screen resolution
phi = (1 + sqrt(5))/2;
ratio = phi/3;
offset = [ scr(3)/4 scr(4)/4]; 
fig1 =  figure('Position',...                               % draw figure
    [offset(1) offset(2) scr(3)*ratio scr(4)*ratio]);
hold on
set(fig1,'numbertitle','off',...                            % Give figure useful title
    'name','MOSFET as a small-signal amplifier',...
    'Color','white',...
    'visible','off');
fontName='Helvetica';
set(0,'defaultAxesFontName', fontName);                     % Make fonts pretty
set(0,'defaultTextFontName', fontName);
set(groot,'FixedWidthFontName', 'ElroNet Monospace')      

% Create axes
ax1 = axes(fig1);
hold(ax1,'on');
box(ax1,'off');
grid off
hold on


%% Plotting
V_s = plot(XTrace1,V_source,...
        'DisplayName','V_{S}:  200 mV_{p-p} @1kHz       \newline',...
        'Color',[0.9 0.18 0.18 .6],...                 
        'LineStyle','-',...
        'LineWidth',1.5);
hold on

V_o = plot(XTrace2,V_out,...
        'DisplayName','V_{O}:  4.1 V_{p-p}       \newline',...
        'Color',[0.18 0.18 0.9 .6],...                 
        'LineStyle','-',...
        'LineWidth',1.5);
hold on


% Axes and labels
ylabel(ax1,'Voltage  [mV]',...
    'FontName',fontName,...
    'FontSize',14);%,...
xlabel(ax1,'Time \rightarrow [ms]',...
    'FontName',fontName,...
    'FontSize',14);
set(ax1,'FontSize',14,...
	'XMinorTick','off',...
    'YMinorTick','off');
hold on

% Labels and legend
legend1 = legend(ax1,'show');
set(legend1,...
    'Position',[0.332806324110672 0.110661764705882 0.366798418972332 0.030514705882353],...
    'Orientation','horizontal',...
    'Box','off',...
	'FontName',fontName,...
	'Interpreter','tex',...
	'FontSize',13);

max_x = 0.01*1000;
min_y = -3;
max_y = 2;
xlim(ax1,[0 max_x]);
ylim(ax1,[min_y max_y]);
% 
ax1.XTick = sort([ 0:max_x/10:max_x ]);
ax1.YTick = sort([ min_y:max_y/2:max_y ]);

% Adjust figure
pos = get(ax1, 'Position');
pos(1) = 0.05;
pos(2) = 0.08;
pos(3) = pos(3)*1.2;
pos(4) = pos(4)*1.08;
set(ax1, 'Position', pos);
hold off


set(fig1,'visible','on');

warning off;
% epswrite('../report/images/Amplifier_data.eps');


