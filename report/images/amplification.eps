%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 257.000000 200.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.4 (Build 17E199) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 257 200
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 257 200
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /V put
dup 34 /Q put
dup 35 /hyphen put
dup 36 /p put
dup 37 /o put
dup 38 /i put
dup 39 /n put
dup 40 /t put
dup 41 /I put
dup 42 /D put
dup 43 /G put
dup 44 /S put
dup 45 /zero put
dup 46 /uni0394 put
dup 47 /l put
dup 48 /e put
dup 49 /space put
dup 50 /s put
dup 51 /g put
dup 52 /m put
dup 53 /u put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<



B8001510B8001410B80001D0B8000010B8000CD0B8000C2F00BA000F002400032BB8000F10BA001A000600032BB8001A10BA0001001400032BB8000110B8002410B8000CDC303101213E0333321E0217230E0123222E023721362E0223220E02151E0333323601A7FED702162635212035271754540B45362A3E28120101830215375B4535594124021F3E5B3E587401341E352817172736AE33321C2F3D222F6858392848623B3B6448285800020024FF2F01FE02110028003C00BDBA002E000C00032BB8002E10BA0001000200032BB8000110B8000210B80038D0B800382FBA000400020038111239B8000210B80015D0411B0006002E0016002E0026002E0036002E0046002E0056002E0066002E0076002E0086002E0096002E00A6002E00B6002E00C6002E000D5D410500D5002E00E5002E00025DBA0021000C002E111239B800212FB80020DCB8000110B8003EDC00BA001B002600032BB8001B10BA0007003300032BB8000710BA0029001100032BB8002910303125112315232E0123220E0215141E02333236373315140E0223222E0227231E0333323627222E0235343E0233321E0215140E0201FE5001175231435C38181D3A563A3259160211263A2A152E271B015502283D4B247C74EE2A38220E11253A292838231011243B2C01D94A2B2B334F612E355F472A2D30222B48331D091420172A3A24107E98233946232544341F203542222448392300000200450000009A02CA00030007002FBA0001000200032BB8000110B8000210B80004D0B8000110B80006D000B800052FBA0001000000032BB800011030311335231D011133119A5555026268685DFDFB020500000100450000009A02CA00030017BA0003000000032BB800031000B800012FB800002F303113113311455502CAFD3602CA00000000010040000003150211002A00B7BA0003000000032BB8000310B8000DDC4103005F000D00015D4103008F000D00015D41030020000D00015D410300B0000D00015DB80010DCB80018DC4103008F001800015D4103005F001800015D41030020001800015D410300B0001800015DB8001BDCBA0023000D0010111239B8000310B80028D0B800282FBA002900000003111239B8001B10B8002CDC00B800012FB8000E2FB800192FBA0026000800032BB8002610B8000810B80013D0B8002610B80020D0303113113311343E0233321E0215113311343633321E0215113311342E02232206072E01232207233540550F2135251D25160955483F1F27160855192D3F2733551A104E306D3A020205FDFB01420F2D2A1E111F2A19FEAD01423C48121F2A18FEAD017B283924112E2A3028584C00000000010040000001EC021100170045BA0003000000032BB8000310BA000E000B00032BB8000E10B8000310B80015D0B800152FBA00


00>] def
/CharStrings 23 dict dup begin
/.notdef 0 def
/space 1 def
/hyphen 2 def
/zero 3 def
/D 4 def
/G 5 def
/I 6 def
/Q 7 def
/S 8 def
/V 9 def
/e 10 def
/g 11 def
/i 12 def
/l 13 def
/m 14 def
/n 15 def
/o 16 def
/p 17 def
/s 18 def
/t 19 def
/u 20 def
/uni0394 21 def
/uni2B91 22 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4127891 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C92615E2133941906A02CAE799EFE07355B68024211C14942A28E4AFD6CA90DB6CC37EBFFD27C5109C5DB1728FDDE5D5B0EAF50C7752C47B454F8DE7AA420C3207CB8FDB7DF2DA1D08ED655F709C0A11FFC0ECAB94F4D0857F0BF136CB03191048C6BD3F631695BFD96B339323F8D98F5825E654D519D767B368F60106A3C65CE8D8AC6B04AA43E59192F165ECC725BEA194F05DB8BA0273329539FB7906CF47511F25F90B758AFD0F0FE4C13C5A1DD067685DF0BF05288BCFDC6CC49BB91A019B58C0E94AC0AD3DB70C9B97FD3BDF4D6948168EAFF520DB9FD867E9DFE4106A241982AB4FC806B452BBBA354889518F025A7C731C9BE1E69E39BF363ECCFDF468981D06F6CC8A36F4F031DA898F5BECBF29FF553AC0890DCE362C76667AC0A1B0E4BE8C8535FB3E1911752763FC17B0C16863CD086345337E40E87750DCCD72EA135A95F59AC2B895732B72402CDD93A803F4A69615D894AB3D44B32EDF9CE7677A451D1A34A38161A776338BA588693CA01E0229398AB6DDB7CD44D5C6332F1AB4D891196EB7323AC6A23DEA83D788C3A80393AB0EEEBF7B6A46966A7D02FC0DDB6CF8470BF88761F2E992AE57FAA841D907F29D33D6F32FB14AC9D7AA0716E3FB93A85C41B38C9589B687DD25D9519BC2034AAC2A8888151138E29171DFD6BA26925C84BFDA24683F25F1B875A05FB7B03B331148EA762A4E229DC2CBC47EFDCCA728D8F50DA7037A2D85D393C22B95A98522CAF2D4ECCFA7BD09D0AE7FA8043
D79876BA774D3EB3132334BB6D916082A4BF1907A1C3CC9E6B0AC7E3CD8CC805919DAE3B867C421ACBC9E6BE1891EEFE2E1FC0DD669B8E5CA2516A2BAB82B7559646827F7B5B4781601D9EDCB5535CB5D80C37CC252D0133861D4126A9983DFF1D18881D6BA7F920D156403727C7F54C07F7AEA610B4AF25637DFC50E9AA11F38D959D0FC80FDC687A3DA92299A2E637A617A26B0D28586C7A9B0B3D7F1D3C296ED557533ECE390038B1505E8BE0E3E40A43B8DC5CE585E953601DC2A7E64A1C07344EF18CD12FD65372DD894E7F0A7D2DF2BD1D8A799D89906E72B1C395CDD752B31D9CD4D5915233BD3FA090247839FA5F2152592CADA1D2A3F48A49CB9193C18F5B9122B2EBC151C6C7AB7A62493476FD6E9A420392AABCC6119E6710EC69F4B97018DC9DF385CC2E559DDB3DB88F546FE0D0709BFEEC26A439078FC88D34072AC771034B9F47D6B8EB1A6CD15359393B06179ED458E50F2955AC2E6243DC6D7A9F2A431C04A64A641ADE974C78AE18FA8C574DB5147EDC9F3A221F37538A4987267FD99DC0C13E014EBFC239609FABF12AB87BA62D8FD5BE29E2C1C27EB61BC7427C82342208474738C522CDFF9EF24F7A7EEB1B690B187EECE4B44B17D9D16FAED4926089FCE84B335971CA389687A5C70366DF14FB722C52933B1E7A3862B9F6EAE5842432626D6B8B2B799A06A3825E1DF8680A09660068538A55AF561C565D43DED25AF0B4AC9D2257FA8656CEB138F5BE7FD978C3EF358245B578022A0DBD59B87C3EB9BEAF40BDE673150BDD912BB8D645BAAF475C6A9188A0F08F28D4575985EB6C7EE1328709CFA0589CC5A1C4EE58D8CDC7CE15750502E099AEE45AFD7E1871D9BE916D13562A03E47D992C5F12836ED37C577B5828602345991A40291D9823B780E8372C8DBBC120EF2A053D42EEDF743800A220E6873736A1F3F21932F5D72195150567D5354F9ED133A5E36EFF9465C56E38D0DC4A811DAB38736FB6E7A95AB35BB16691F296668B7A7795CB3FC1F4A9E0F30A5DE7E8777634144BDD233F6036BAB51AABE9858D9B4571A646E91E6982FE8F125DD50DC5095A21A6B875748545160171C0404BE60375DA09B1AEAE3B80079B9E43B01E431FD63A6501F6D502584E1EC7DA4CD521582F9B1155028F8CA859A2D932DCCE931D299B00488AE63A5D12EFD67C54095EFA97FDC55B6A589CA2045BFC1BFAC72F89F5A1A77E4E6AA74952A3540859F4F39F89F463B2E2374056F4565F2FEE51045E202352877AAF8F328B408DB673755B54F117CA19704DB9214D46C27E067D6E88B9597271146824B08B3359E7314F66C78D2446978F090748263676120BB10E146B7AAEF8099C7E69ECB17BBA23D39766E66721D5BCC1D96983E7AD93C0A8FDD4088CB73D9900EF2F526CBC02EC82E4ADC8081274CB16965A02131F6253FAE22A
E4726090470CEAC19C5749128C47A26DDE1EFF533B67AC5ABCCDB8AD9B69DBA61706F8352BAC31BB9782F88BC78235CCC10B48D12BC7DA7233FD3B445B9056602326B13B36299FD84C0E2E2FFA3D4143B7231D3B64CEB38DC7C1B43D09E1F905D9C2648F6A9DDC5B16263A94476B9284B096CC85A62BD5A7E2FB9FE200B0B3F3591557BD0C16D0A4103EE79A6DBF9C07B2DE06857BBB951DD2F314DEBF1E137890A6A9B01E747203F43A3F13D31A15AEFD0D7466C4AD9D547011996B3209256531D392EC9EFA612547F21DDDDE902158287C7FD9834CBEFE083CA3DE98FC7E5119CB0AC8D090FD8A6728B154D1D848053F03CDBD48A27A215E553BF3FEF1621EFEE1B3901039442B9494F3E50860E37001691C044DB7C4210C5BC3CB669F817F59EF483C11F6851C737065FCFD823615179A1F77CC33A4F4C3EBD51B5B2AAB1618F4F5DEA1480B9660C5AE0E83AB4DCF77903EA5F187A4EAD416025E40CD228B0D2C84EBF15E78E5C2A59E55B27EB0757C2D260900DD03564C2445EE37D7351F9F4A70BAEE24E1E3668F0DD13137A0BBF7A532FE56044E56D3C4A1B26D64252CD21D1A7C52FA0008127416EA8A1F475A86171405EF21B0DDFCB9458CDEDF15E0D7ABCFDA118E4EA1CEE4E33CFDFC8C45E49039AF969249611854BE9C7B0A59DC633A377F9D8328E2AADA3FF2B954AFABEA9AB597554D0C1FDA27F1A40546893550DA5D3E62E08DF3B0E08F0FFE5632D0757589EEFBADE89D941A95382A430FC25092A02AB87F58A9D88AA8234EADD73F9B03825B5C5E5F9D78EC986942E27374FADBF8F0F0F297B025D55C7C48CB799FACFEA9B37194FA810D106B60E1F0E484953FB551DD3107E2D7544D6745341746AB2855D27BF0FB9EC57F13ECB69A1F1AEFF119CD65B364FEDBD539AE295EDA1775FB9C139AE60316DC115855050D4AE33F11705CF23B5D6637070CD1BD8A3EE42FA6CF4ED49464F7A6024D61FC46574BBC4B28AF3A0A030C687A54F78F6AF111F5FFD8723D8B685C5C80D7648163052616FB02CC3BE8C7C5A35FB985CF681DEAFB5CBF3FFC89E05E8A6655C102DEAF31A5C0F6A1B8454661C55CBEDF168D3BDFB053541C42AC6A25A118F85192944EE1E634B6A36FB3BAAB9D1CC9E03DE9DCEEBF41C1296ED55489664F127D5B986E937F7074703DCFA84059001064643404DABCD8FF9509169937DDAE81C317AFA6CF36E2F3560E38788BDE97B0F7B5B5392345337AA8457363F308DB5F1AC8AAD8F39A120ECB249A91C55E5D9E3D958C9BAD7B433462176560E3728C4FBB86AA395711E2B20941CE6D3821E42F17B6A4D15D8C041A4EB74D743DC70CE6D0D3B66EE5AAAB7AC70C20C8757F057F77B00542B929B2A400821E462579EBDA6EDEAE865FA3C5E231621557433C9C54982DBAD6ABE8BB29734D7281D06277E7901477F7F5

30222D0FBA5A1E3700C2B3BBE3FF9A00678E703A1F2ACC5BBCE31F052E2F13D6C8024D313FEEBDBED5EDF909EC571D42F8F5178AABD8EBD003F6C3E76058A0076D45940E237D3A72F8F63316DF23F9FB7CB91E89822545E80E0A72F3FE8C7250BD6FF5FBC6C16D4110B9B3B8F1CCA6A42D5078C7094D9D07F5D32819DFE115192AA32733A20CBC9C0A9447C963603CA62FE9C39FDFC1FA0F469417D0589D2D2D756BEED521FD91B7F7A856E64BB390BA08C0C5394151DC496BFDFC3C3ED228C456664BF73F78BEA1AB52940807D46CA7C57B9EF469C0B0FF1F401905EFDC68304BB22049DBB3034140037E2164C481CCDA5AAA7B57030549C913B4DA9C357E397FB6331103BE4C46F4158A55431116FB3761600E0682509A3A7CA47ABCC23B8BB34874DAE99A2A8CDF087F07120D1C5FC6A3305B7244D424130BDE4FD93ED9FB54B470CC5A03AB9F15687C2E5D29E1EB3E8B0B7D30B4FDCC35717917E2D44812BAA06310D1EB1F22F247D162745012
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
0.5 w
1 J
1 j
[
1
3
] 0 d
0.60000002 i
/Cs1 SC
0.40000001 0.40000001 0.40000001 sc
q
0 0 257 200 rc
1 0 0 -1 -41 473 cm
192.57481 365.98187 m
277.21259 365.98187 l
S
190.00812 378.51239 m
190.00812 443.07065 l
S
181.87459 442.51239 m
182.87459 387.00259 l
S
1 w
[] 0 d
0.13725491 0.36862746 0 sc
194.58267 381.17633 m
194.95206 380.11118 195.3259 379.00174 195.69092 377.98062 c
196.05595 376.95947 196.40799 375.96738 196.77307 375.04889 c
197.13817 374.13037 197.51224 373.21161 197.88168 372.46896 c
198.25111 371.72635 198.62048 371.11542 198.98993 370.59265 c
199.35936 370.06985 199.73351 369.61533 200.09853 369.33197 c
200.46356 369.04858 200.81529 368.88733 201.18031 368.89221 c
201.54535 368.89713 201.91949 369.07797 202.28893 369.36133 c
202.65837 369.64471 203.02773 370.06497 203.39717 370.59265 c
203.7666 371.12033 204.14069 371.78506 204.50578 372.52771 c
204.87086 373.27032 205.2229 374.13525 205.58792 375.04889 c
205.95296 375.96249 206.3268 376.98883 206.69617 378.00995 c
207.06555 379.0311 207.43503 380.12097 207.80441 381.17633 c
S
207.81764 381.17633 m
208.18701 382.24146 208.56085 383.35089 208.92589 384.37204 c
209.29091 385.39316 209.64301 386.38525 210.00803 387.30377 c
210.37306 388.22229 210.74684 389.14102 211.11627 389.88367 c
211.48572 390.62628 211.85544 391.23721 212.22488 391.75998 c
212.59431 392.28278 212.96809 392.73721 213.33313 393.02057 c
213.69815 393.30396 214.05025 393.4653 214.41528 393.46042 c
214.7803 393.45554 215.15408 393.2746 215.52351 392.99124 c
215.89296 392.70786 216.26263 392.28766 216.63213 391.75998 c
217.00163 391.23233 217.3757 390.56757 217.74074 389.82495 c
218.10576 389.08231 218.45749 388.21738 218.82253 387.30377 c
219.18755 386.39014 219.56169 385.36383 219.93114 384.34268 c
220.30057 383.32153 220.67 382.23166 221.03937 381.17633 c
S
221.03937 381.17633 m
221.40875 380.11118 221.78258 379.00174 222.14761 377.98062 c
222.51263 376.95947 222.86467 375.96738 223.22977 375.04889 c
223.59485 374.13037 223.96893 373.21161 224.33838 372.46896 c
224.70781 371.72635 225.07718 371.11542 225.44661 370.59265 c
225.81606 370.06985 226.1902 369.61533 226.55522 369.33197 c
226.92026 369.04858 227.27197 368.88733 227.63701 368.89221 c
228.00204 368.89713 228.37617 369.07797 228.74562 369.36133 c
229.11505 369.64471 229.48442 370.06497 229.85387 370.59265 c
230.2233 371.12033 230.59738 371.78506 230.96246 372.52771 c
231.32756 373.27032 231.6796 374.13525 232.04462 375.04889 c
232.40965 375.96249 232.78348 376.98883 233.15286 378.00995 c
233.52223 379.0311 233.89172 380.12097 234.26111 381.17633 c
S
234.27434 381.17633 m
234.64371 382.24146 235.01755 383.35089 235.38257 384.37204 c
235.7476 385.39316 236.0997 386.38525 236.46472 387.30377 c
236.82976 388.22229 237.20352 389.14102 237.57297 389.88367 c
237.9424 390.62628 238.31213 391.23721 238.68158 391.75998 c
239.05101 392.28278 239.42479 392.73721 239.78981 393.02057 c
240.15485 393.30396 240.50694 393.4653 240.87196 393.46042 c
241.237 393.45554 241.61078 393.2746 241.98021 392.99124 c
242.34966 392.70786 242.71931 392.28766 243.08882 391.75998 c
243.45831 391.23233 243.8324 390.56757 244.19743 389.82495 c
244.56245 389.08231 244.91418 388.21738 245.27922 387.30377 c
245.64424 386.39014 246.01839 385.36383 246.38782 384.34268 c
246.75726 383.32153 247.12669 382.23166 247.49606 381.17633 c
S
247.49606 381.17633 m
247.86543 380.11118 248.23927 379.00174 248.60431 377.98062 c
248.96933 376.95947 249.32137 375.96738 249.68646 375.04889 c
250.05154 374.13037 250.42563 373.21161 250.79506 372.46896 c
251.16451 371.72635 251.53387 371.11542 251.90331 370.59265 c
252.27275 370.06985 252.64688 369.61533 253.01192 369.33197 c
253.37694 369.04858 253.72867 368.88733 254.0937 368.89221 c
254.45872 368.89713 254.83287 369.07797 255.20232 369.36133 c
255.57175 369.64471 255.94112 370.06497 256.31055 370.59265 c
256.67999 371.12033 257.05408 371.78506 257.41916 372.52771 c
257.78424 373.27032 258.13629 374.13525 258.50131 375.04889 c
258.86633 375.96249 259.24017 376.98883 259.60956 378.00995 c
259.97894 379.0311 260.34842 380.12097 260.7178 381.17633 c
S
260.73102 381.17633 m
261.1004 382.24146 261.47424 383.35089 261.83926 384.37204 c
262.20428 385.39316 262.5564 386.38525 262.92142 387.30377 c
263.28644 388.22229 263.66022 389.14102 264.02966 389.88367 c
264.39911 390.62628 264.76883 391.23721 265.13828 391.75998 c
265.50769 392.28278 265.88147 392.73721 266.24652 393.02057 c
266.61154 393.30396 266.96362 393.4653 267.32867 393.46042 c
267.6937 393.45554 268.06747 393.2746 268.43689 392.99124 c
268.80634 392.70786 269.17603 392.28766 269.5455 391.75998 c
269.91501 391.23233 270.28909 390.56757 270.65411 389.82495 c
271.01913 389.08231 271.37088 388.21738 271.7359 387.30377 c
272.10092 386.39014 272.47507 385.36383 272.84451 384.34268 c
273.21396 383.32153 273.58337 382.23166 273.95276 381.17633 c
S
0 0 0 sc
63.77166 287.67929 m
63.77166 443.07065 l
276.35196 443.07065 l
S
0 i
CM
239.35196 29.929358 m
235.35196 31.429358 l
235.35196 28.429358 l
h
239.35196 29.929358 m
f
0 J
0 j
1 0 0 -1 -41 473 cm
280.35196 443.07065 m
276.35196 441.57065 l
276.35196 444.57065 l
h
280.35196 443.07065 m
S
CM
22.77166 189.32069 m
21.27166 185.32069 l
24.27166 185.32069 l
h
22.77166 189.32069 m
f
1 0 0 -1 -41 473 cm
63.77166 283.67929 m
62.27166 287.67929 l
65.27166 287.67929 l
h
63.77166 283.67929 m
S
/Cs2 SC
0 sc
1 0 0 -1 231.25197 18.612606 cm
/F1.1[ 16 0 0 -16 0 0]sf
-4.888 5.776001 m
(!)s
1 0 0 -1 115.95668 100.58189 cm
/F1.1[ 6 0 0 -6 0 0]sf
-10.227 2.4160004 m
("#$%&'\()[ 4.560000 2.334000 3.558000 3.444000 1.332000 3.336000 0.000000 ] xS
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -41 473 cm
169.25 372.51239 m
169.25 372.51239 172.17961 370.81256 176.5 372.51239 c
177.79276 373.02103 179.02812 373.76245 180.12471 374.55185 c
S
0 i
CM
142.0914 95.762688 m
140.13257 99.559128 l
138.11928 97.335022 l
h
142.0914 95.762688 m
f
0 J
0 j
1 0 0 -1 -41 473 cm
183.0914 377.2373 m
181.13257 373.44086 l
179.11928 375.66498 l
h
183.0914 377.2373 m
S
0.5 w
1 J
1 j
[
4
4
] 0 d
0.60000002 i
186.22835 382.72992 m
186.22835 443.07065 l
S
276.21259 381.28897 m
63.69981 381.28897 l
S
[
1
3
] 0 d
0.40000001 0.40000001 0.40000001 sc
276.21259 394.51239 m
172.39906 394.51239 l
S
1 w
[] 0 d
0.13725491 0.36862746 0 sc
185.25232 394.51239 m
185.5452 394.84747 185.85027 395.18658 186.13104 395.51773 c
186.41182 395.84885 186.68462 396.16821 186.93718 396.49939 c
187.18974 396.8306 187.44237 397.16992 187.64658 397.50507 c
187.85077 397.84018 188.01875 398.17526 188.16251 398.51041 c
188.30626 398.84552 188.43123 399.18494 188.50916 399.51605 c
188.58707 399.8472 188.63141 400.16626 188.63007 400.49741 c
188.62872 400.82852 188.57899 401.16794 188.50107 401.50305 c
188.42316 401.8382 188.3076 402.17325 188.16251 402.50839 c
188.01741 402.84354 187.83463 403.18286 187.63043 403.51407 c
187.42622 403.84525 187.1884 404.16458 186.93718 404.49573 c
186.68596 404.82687 186.40376 405.16599 186.12297 405.50107 c
185.84219 405.83615 185.54251 406.17133 185.25232 406.50641 c
S
185.25232 406.5184 m
184.95944 406.85349 184.65439 407.1926 184.37361 407.52371 c
184.09282 407.85486 183.82004 408.17426 183.56747 408.5054 c
183.31491 408.83652 183.06229 409.1756 182.85808 409.51074 c
182.65388 409.84586 182.4859 410.18127 182.34215 410.51639 c
182.19841 410.85153 182.07344 411.19058 181.99553 411.52173 c
181.9176 411.85287 181.87325 412.17227 181.87459 412.50339 c
181.87593 412.83453 181.92567 413.17358 182.0036 413.50873 c
182.08151 413.84387 182.19707 414.1792 182.34215 414.5144 c
182.48724 414.84958 182.67003 415.18893 182.87422 415.52005 c
183.07843 415.8512 183.31625 416.17026 183.56747 416.5014 c
183.8187 416.83252 184.10089 417.17194 184.38168 417.50705 c
184.66246 417.84219 184.96214 418.17731 185.25232 418.51239 c
S
185.25232 418.51239 m
185.5452 418.84747 185.85027 419.18658 186.13104 419.51773 c
186.41182 419.84885 186.68462 420.16821 186.93718 420.49939 c
187.18974 420.8306 187.44237 421.16992 187.64658 421.50507 c
187.85077 421.84018 188.01875 422.17526 188.16251 422.51041 c
188.30626 422.84552 188.43123 423.18494 188.50916 423.51605 c
188.58707 423.8472 188.63141 424.16626 188.63007 424.49741 c
188.62872 424.82852 188.57899 425.16794 188.50107 425.50305 c
188.42316 425.8382 188.3076 426.17325 188.16251 426.50839 c
188.01741 426.84354 187.83463 427.18286 187.63043 427.51407 c
187.42622 427.84525 187.1884 428.16458 186.93718 428.49573 c
186.68596 428.82687 186.40376 429.16599 186.12297 429.50107 c
185.84219 429.83615 185.54251 430.17133 185.25232 430.50641 c
S
185.25232 430.5184 m
184.95944 430.85349 184.65439 431.1926 184.37361 431.52371 c
184.09282 431.85486 183.82004 432.17426 183.56747 432.5054 c
183.31491 432.83652 183.06229 433.1756 182.85808 433.51074 c
182.65388 433.84586 182.4859 434.18127 182.34215 434.51639 c
182.19841 434.85153 182.07344 435.19058 181.99553 435.52173 c
181.9176 435.85287 181.87325 436.17227 181.87459 436.50339 c
181.87593 436.83453 181.92567 437.17358 182.0036 437.50873 c
182.08151 437.84387 182.19707 438.1792 182.34215 438.5144 c
182.48724 438.84958 182.67003 439.18893 182.87422 439.52005 c
183.07843 439.8512 183.31625 440.17026 183.56747 440.5014 c
183.8187 440.83252 184.10089 441.17194 184.38168 441.50705 c
184.66246 441.84219 184.96214 442.17731 185.25232 442.51239 c
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 8.1102228 184.99451 cm
/F1.1[ 16 0 0 -16 0 0]sf
-2.072 5.776001 m
(\))s
1 0 0 -1 15.696844 179.42365 cm
/F1.1[ 10 0 0 -10 0 0]sf
-3.52 3.8600006 m
(*)s
1 0 0 -1 244.22047 11.896075 cm
-7.0349998 3.8600006 m
(+,)[ 7.590000 0.000000 ] xS
1 0 0 -1 19.999516 24.128357 cm
/F1.1[ 11 0 0 -11 0 0]sf
-3.0580001 3.8460007 m
(-)s
/Cs1 SC
0 0 0 sc
1 0 0 -1 248.5686 91.771423 cm
/F1.1[ 7.1213002 0 0 -7.1213002 0 0]sf
-3.064786 2.4003022 m
(.\))[ 4.614603 0.000000 ] xS
1 0 0 -1 253.15974 88.825111 cm
/F1.1[ 3.182081 0 0 -3.182081 0 0]sf
-0.95536894 0.95545107 m
(*)s
1 0 0 -1 143.27087 20.832399 cm
/F1.1[ 6.525403 0 0 -6.525403 0 0]sf
-3.831284 2.4086447 m
(.!)[ 4.228461 0.000000 ] xS
1 0 0 -1 148.45792 17.809908 cm
/F1.1[ 2.9158103 0 0 -2.9158103 0 0]sf
-1.7748156 0.95917881 m
(+,)[ 2.213100 0.000000 ] xS
0.60000002 i
1 0 0 -1 -41 473 cm
282.38275 369.76483 m
282.76489 392.08081 l
S
0 i
CM
241.79228 79.31942 m
242.36479 80.929451 l
241.16498 80.908913 l
h
241.79228 79.31942 m
f
0 J
0 j
1 0 0 -1 -41 473 cm
282.79227 393.68057 m
283.36481 392.07056 l
282.16498 392.09109 l
h
282.79227 393.68057 m
S
CM
241.35536 104.83494 m
240.78285 103.2249 l
241.98267 103.24545 l
h
241.35536 104.83494 m
f
1 0 0 -1 -41 473 cm
282.35538 368.16507 m
281.78284 369.77509 l
282.98267 369.75455 l
h
282.35538 368.16507 m
S
1 J
1 j
0.60000002 i
187.07481 445.5499 m
184.0748 445.5499 l
S
0 i
CM
141.47479 27.450115 m
143.0748 26.850115 l
143.0748 28.050114 l
h
141.47479 27.450115 m
f
0 J
0 j
1 0 0 -1 -41 473 cm
182.47479 445.5499 m
184.0748 446.14987 l
184.0748 444.94989 l
h
182.47479 445.5499 m
S
CM
147.6748 27.450115 m
146.07481 28.050114 l
146.07481 26.850115 l
h
147.6748 27.450115 m
f
1 0 0 -1 -41 473 cm
188.6748 445.5499 m
187.07481 444.94989 l
187.07481 446.14987 l
h
188.6748 445.5499 m
S
1 0 0 -1 9.7260971 94.10553 cm
/F1.1[ 7.1209998 0 0 -7.1209998 0 0]sf
-0.92216951 2.4003065 m
(\))s
1 0 0 -1 13.817226 91.159218 cm
/F1.1[ 4.1820002 0 0 -4.1820002 0 0]sf
-2.8965006 1.4414523 m
(*")[ 2.944128 0.000000 ] xS
1 J
1 j
0.60000002 i
1 0 0 -1 -41 473 cm
60.07481 381.22992 m
63.69981 381.28894 l
S
0.69625998 0.00063000002 0.10877 sc
0 i
1 0 0 -1 194.95865 168.19026 cm
/F1.1[ 6 0 0 -6 0 0]sf
-15.837 2.4160004 m
(,/%$01&2134)[ 3.888000 1.332000 3.444000 3.558000 3.222000 1.668000 1.332000 3.000000 1.668000 3.444000 0.000000 ] xS
0.60000002 i
0.69411802 0 0.109804 sc
1 0 0 -1 -41 473 cm
221.95636 310.87836 m
221.95636 310.87836 222.49341 314.22253 219.35818 317.64682 c
218.42007 318.67142 217.28517 319.55902 216.15523 320.2999 c
S
0 i
CM
171.58496 150.89285 m
175.83122 151.36105 l
174.47633 154.03767 l
h
171.58496 150.89285 m
f
0 J
0 j
1 0 0 -1 -41 473 cm
212.58496 322.10715 m
216.83122 321.63895 l
215.47633 318.96231 l
h
212.58496 322.10715 m
S
0.69625998 0.00063000002 0.10877 sc
1 0 0 -1 193.36221 121.82819 cm
-8.7270002 2.4160004 m
(%5\($5\()[ 3.444000 3.336000 1.890000 3.558000 3.336000 0.000000 ] xS
1 J
1 j
0.60000002 i
0.69411802 0 0.109804 sc
1 0 0 -1 -41 473 cm
245.87796 352.11136 m
245.87796 352.11136 249.1626 351.28488 252.84711 354.10971 c
253.94957 354.95499 254.93272 356.00821 255.76926 357.06927 c
S
0 i
CM
216.8808 112.53156 m
216.04428 116.72086 l
213.49594 115.13785 l
h
216.8808 112.53156 m
f
0 J
0 j
1 0 0 -1 -41 473 cm
257.8808 360.46844 m
257.04428 356.27914 l
254.49594 357.86215 l
h
257.8808 360.46844 m
S
0.69625998 0.00063000002 0.10877 sc
1 0 0 -1 165.58267 47.695301 cm
-6.7259998 2.4160004 m
(&'$5\()[ 1.332000 3.336000 3.558000 3.336000 0.000000 ] xS
1 J
1 j
0.60000002 i
0.69411802 0 0.109804 sc
1 0 0 -1 -41 473 cm
207.17476 430.89526 m
207.17476 430.89526 206.41995 434.19711 202.23027 436.19757 c
200.97664 436.79614 199.59186 437.19397 198.26666 437.45761 c
S
0 i
CM
153.27936 35.204178 m
157.39182 34.047615 l
157.13828 37.03688 l
h
153.27936 35.204178 m
f
0 J
0 j
1 0 0 -1 -41 473 cm
194.27936 437.79581 m
198.39182 438.95239 l
198.13828 435.9631 l
h
194.27936 437.79581 m
S
1 J
1 j
0.60000002 i
0 0.21568599 0.46274501 sc
63.82481 442.72992 m
63.82481 442.72992 108.82481 443.28699 128.32481 437.22992 c
147.82481 431.17282 165.77272 412.88705 183.63268 385.49023 c
201.49263 358.09338 209.99738 310.93176 213.13977 293.48187 c
S
0 i
0 0 0 sc
CM
146.38142 92.83065 m
147.15633 92.055748 147.15633 90.799393 146.38142 90.024498 c
145.60652 89.249596 144.35016 89.249596 143.57527 90.024498 c
142.80037 90.799393 142.80037 92.055748 143.57527 92.83065 c
144.35016 93.605553 145.60652 93.605553 146.38142 92.83065 c
f
ep
end
%%Trailer
%%EOF
