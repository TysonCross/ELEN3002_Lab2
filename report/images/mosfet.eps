%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 173.000000 157.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.4 (Build 17E199) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 173 157
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 173 157
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /p put
dup 34 /D put
dup 35 /S put
dup 36 /G put
dup 37 /hyphen put
dup 38 /t put
dup 39 /y put
dup 40 /e put
dup 41 /space put
dup 42 /s put
dup 43 /u put
dup 44 /b put
dup 45 /r put
dup 46 /a put
dup 47 /n put
dup 48 /c put
dup 49 /h put
dup 50 /l put
dup 51 /i put
dup 52 /o put
dup 53 /d put
dup 54 /O put
dup 55 /two put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<
74727565000900000000000063767420000000000000009C000000186670676D00000000000000B400000428676C796600000000000004DC000014A4686561640000000000001980000000366868656100000000000019B800000024686D747800000000000019DC000000646C6F63610000000000001A40000000346D6178700000000000001A7400000020707265700000000000001A940000004D14000014004B005A00000011FF3A000B0205000C02CA0011B800002C4BB800095058B101018E59B801FF85B844001DB9000900035F5E2DB800012C2020456944B001602DB800022CB800012A212DB800032C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB800042C2046B00425465258238A592046206A6164B0042546206A61645258238A592FFD2DB800052C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB800062C2020456944B001602020457D691844B001602DB800072CB800062A2DB800082C4B20B003265358B0801BB040598A8A20B003265358B0022621B0C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B80003265358B0032545B8014050582321B8014023211BB003254523212321591B2159442DB800092C4B535845441B2121592DB8000A2C4BB800095058B101018E59B801FF85B800441DB9000900035F5E2DB8000B2C2020456944B001602DB8000C2CB8000B2A212DB8000D2C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB8000E2C2046B00425465258238A592046206A6164B0042546206A61645258238A592FFD2DB8000F2C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB800102C2020456944B001602020457D691844B001602DB800112CB800102A2DB800122C4B20B003265358B0801BB040598A8A20B0032653582321B0C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B0032653582321B801408A8A1B8A235920B80003265358B0032545B8018050582321B8018023211BB003254523212321591B2159442DB800132C4B535845441B2121592DB800142C4BB800095058B101018E59B801FF85B800441DB9000900035F5E2DB800152C2020456944B001602DB800162CB800152A212DB800172C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB800182C2046B00425465258238A592046206A6164B0042546
206A61645258238A592FFD2DB800192C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB8001A2C2020456944B001602020457D691844B001602DB8001B2CB8001A2A2DB8001C2C4B20B003265358B0401BB000598A8A20B0032653582321B0808A8A1B8A235920B0032653582321B800C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B0032653582321B801408A8A1B8A235920B80003265358B0032545B8018050582321B8018023211BB003254523212321591B2159442DB8001D2C4B535845441B2121592D00020033000101CC02C8000300070065B800142BB800082FB800002FB8000810B80006D0B800062FB900020003F4B8000010B900040003F4B80009DC00B800014558B800042F1BB90004000A3E59B800014558B800052F1BB9000500043E59B8000410B900000002F4B8000510B900020002F4303101211121131121110199FECD013333FE67029AFD950299FD3902C70001003200EE0153013E0003000B00BA0000000100032B303113152135320121013E505000010018000001EE02C5002B0091B8002D2FBA0001000000032BB8000110B8002D10B80022DCB8000BDC410500DA000B00EA000B00025D411B0009000B0019000B0029000B0039000B0049000B0059000B0069000B0079000B0089000B0099000B00A9000B00B9000B00C9000B000D5DB8002210B80016D0B800162FB8000110B80018D0B800182F00BA0018001500032BBA0027000600032BB800271030311333263E0233321E0215140E02070E03072135213E03373E0335342E0223220E022C55010F2235251C322516172D442D254436230501CFFE940627374221213E301D233C512E38583B1C01CA203F321F12222F1D2538302F1C163242593F4B21332C2714152E39482F324C331B26435C000002004E0000029A02CA000E0019007DB8001B2FBA0001000F00032BB8000110B8001B10B80016DCB80007DC410500DA000700EA000700025D411B0009000700190007002900070039000700490007005900070069000700790007008900070099000700A9000700B9000700C90007000D5D00BA0000001000032BB8000010BA000F000100032BB8000F103031371133321E0215140E0423031133323E0235342623ADA0425A39191B2A35363010FDF559825428B2A550022A25476540425D3E241305027AFD36325F8B5AACA80000000001002BFFF002B902DB002C00A1B8002D2FBA0002000000032BB8000210B8000010B80006D0B8002D10B80025D0B800252FB80010DC411B0006001000160010002600100036001000460010005600100066001000760010008600100096001000A6001000B6001000C60010000D5D410500D5001000E5001000025DB8000210B8001BD0B8001B2F00BA000B002A0003





00>] def
/CharStrings 25 dict dup begin
/.notdef 0 def
/space 1 def
/hyphen 2 def
/two 3 def
/D 4 def
/G 5 def
/O 6 def
/S 7 def
/a 8 def
/b 9 def
/c 10 def
/d 11 def
/e 12 def
/h 13 def
/i 14 def
/l 15 def
/n 16 def
/o 17 def
/p 18 def
/r 19 def
/s 20 def
/t 21 def
/u 22 def
/y 23 def
/uni2B91 24 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4127891 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C926774C520A180165F2668824383C2FD0BBD585551A6494A5974E80882DD1B37F900E01291F8967167EE9EF4AECD6AB20E5EFFE36D633B63B0C3FD71D6C0843FCE6DAA0C53D6751983E5852F2951ED2757B4892D7117736D476AB64DE012B55642046119D7C1BDFCF2AAC5C05688F8A215AC5D6B371D2DC98D55D8828D6CF54AA61561EB18EB352C4031E98EA408460B443FC69E4451138B40FE0E7D00FB7EC9E962D568DA7B97BF7CFF66FEF6A61A8FD6BB258B5C234285996E9AEF01A79735063292E69251DD7EA290A28D1D6A4CF73A8BC41AF88CF6C2CD39429D4B7AA5A3EC5EF8265AE4C11368D90133B5D081E865130D078769F36B6ADDE1353B4891886D95F511191D7FB4B0F5448509554A2490B6E9B179039E93254882BFFF653D51C734A33E94334C514B9645281493EAA9254AA059313CA418A00B3A57CD151997559B6D548C451E44A52C9E6BB71654BAFBDD079B9CC1E554C5BF6B20067353942050354EEA3BBB9548549C7866284C29086E2AFD108ED75D97F94B6FB3404AA01D6E97E33717F941E440271767B976DD60F82888A6E26111F4B32975F41385693E0300CE01557C18C57B73C54FD146BDD08616660810853847A2C99500377B2F64E0009433475E7DC53E083FE608AD59223AAD6C31192249E35F77D2B2BB0331741E0F9AC2ACC6F9B97DA048DAA3E600098729D8B0F1EFE267172128871D4B3816A1474F85B465D5AF9391C4AE61463620EC1C9A5A242745F6183D525473506B08
AD315DC287CCFA6F4A5C52BF580F11C7314DB386F58B3920CC8EB141936903E547684499A92557C680DC6E7A137174D5D2FF946B9F3FBBD83424B82CF112AEBA90B525DE5D13B8AAF7C19C1B84CDD9B9969B209169EFC1A7F93484B1518A97FD660F82DE7E2AF63048A4AD5E52E9A1D2EA65C48F097BB34D59D55BBC1DE983680CC30151AF52436EED05A83782993F876C04A3278115BEEDAA7CE60D06F042213E8967EF24B687E7DD15C57960C83E4666C81078C4168117929EF5CA63117B0921A4DA2ED1FF0592204842351DC73198A52F7297D2B90A0476536FAFB4B8426684F6C5D859CD7242B6E151D5E28FA0A6DA3ED980F7520F3BE6E29986681B27E54FBDD1D2078C1A04F45A254D3570D9D842940BA197CFCB52890B22FB0B58CE347F0898BE025B87E7194070488DECAE98914E823D4874956EF984AB1998C8E9E6104FCFFFAE628BF7647213B95A33D839971800A0FB7DC363E108593D84FABF7B9999C6A64E3C7368C3EFF54693D523480FBBC5F03F1CCCEB2D0D1322FD6B524B9675DF4490778B245FDE680C40E128B013E974BEC426E10159148D055580A3B0D028BCEB4DFF2585ABA751B5FA1E4BF7F5CE680C715A9158297B3D31B5E82346526754D8FFF0A24D600EAC7EFCCA0203B1ACB2D7156BD7F4C2FAFE8EB24C1BEF074C6A0762A1CA4EC5A0BB28908ABB3AEE64303C96107521F69C241D0FA1CBEF2079ED902D6DC82F5DCF40A9B129896213A65BCB2F38114D1EBC7AB96BC2C43EC752E5916692F8E6C5BA0D3842CC4BB2826C53A55B7E7E6B27EC6C1F9AC932B67142DCA60D120C71D01565E618523D83BF1B0A2BF91775680A6D887AF6C5B01E3202209A49DB785B535F4566E606E4ACA2EF88A2A3CCE581205982D7CB43970C6A9AA39383FE3DF333184C0513BEF2E89846B636842781C5E3A166863A6C929E6FA3787ED05D5A25221BC6727875E7A469FBC2507BC44DADE734281E5B00CA8BECC9FE14A693B16828F2FE35A34C1C319D48814871B54C233EA6BFC45C037D126D288890C8073562D7A8D56445D042887310B8857D3550556CCFA87E7DD4AEE7C27AA5DBDE619A55B81188707E46E9B417C6263EA524B3D1C129EF90B1A4BD43637B866C5CE6AFD197377850697503565458FFCE098AE1D96C6A37B4715984F4E343C789FA2ECF1F6F17D14CDE46228A6234A002B5179097A3B659C455C10553BF20869B55E54EC1C1C37C3731F70D887067982C60AF932958C49275445B73DCA25150E6649F4044454D418B32B6AE3A2C6E19633D3DA16680B48F427B3AE4F6E5CA03DA84FA57B3DEB067F78E1A80D6D19F2834A76104D79E5F92043EF801CCD30ACDC19C487AF69BA1DCD08CE7900542DCEA2937F15BADE359920F6C9473F7AE9F81D91AEEADCF52D488689F474A420336CAF5A2BE8B89E1693C43E114C6EA
0DC2C30F771EEE153D837EEF37ABD8E745875D0312BF0B4455E656A363ECD43BC9CD2F17E322217D3AF31CB1561E27A666005737DA2F39018958FE6373570FBA1EB4189C6CDC051CA852E97F09C6969BE923AFDAE8F3AFEE73219263BBA88FCA81D0AE9882E1F66B3D3D7CB369DC40F59B2BDC1FCEC625FA8B021CBDF55D3E19CCC640C4F6C7419EDE0D4482D2765D704A389B0127E9AA20B30002C39664010D445997DC160FD9B745E73E79343752C00EE348B157BB31900C8EA283E17BB975799B491714CB2D7E320F997589886AEF6338E81CEA3CB063EFC933F2E51CB33785FFCA2401887588B74CF35481185BFD2D19D35C48C72DE00DEAAD58D73A4F3EE086173C2812B115F3A7BC27D7ED4217B5FF89707CEBC006D438EF3AA152B90187D9FB13F941B4693C0D7734598DD150AA830C83DD49E600E98A95D0D4EA413D1939BC57D65233BA74E06E6478B0507342F9F78691F45B3B468B7049747521CA852E747AA17A93159EBF5213850B1A5BBA44FCB59D1CEBB3BBD90D4F26AF3FF98B3574883FC3DC35F00617F38B46292E7F936D969E01E15108E70BAF6D4D45F6BB79AE73DA059F6B55AF9C78F6624029EAA30F53F7AD7D80743DFBF44984690202CD5E9A75A017487CA12C210B0023E86A666CFF72391CFEAEAD547542B92F3D6EA799646B1E2ADC4AED98F748A800FF0CADF6D080F8A5407E07231F329FCEE80E238663593BACC682094999ED8F827F16CDB622E726E7964DEA13DD787D5BCF1B43472BE398F68359951A148FA658991247E833C30DDDFD3BE4272DC7A66674CCB13FEC3C9CFD22C79F364C7F41517BAEF52EC9C54066E72F9CC51B718115BBA7F655FD5C6ADC9B8E47C09F097A09DC5DBC204475850A3C8E2DEDF6A588DC066BE4902ED32359AF3319B1F9063CF52EE101A5052071701B22778A3C09DD408F18B115DF85F65FE011B512284C1AA9D6435F70B127BA44E510E2A730DF52E6C1FFD789CA33B7377BDA0AE4F95A8F8DEE5E7177447E19CDDA4B1B07E364C8288B03C34DEB6CE8D7373FAED872DF87DDED9E87A41A12C6C1511AD290241F0DA2E52C90C39803157B5A84F3A105A249BA15CB445B72BA1849DAB3EF3A1040AD170DA4EEFCF7527F0130550B07B24426481827AE42F63B38435DA0FCEFFF5D4B31E233F6A5F9309CCE1B9A9B4E795DCA739FE18F154EF3C476945060752A3261EA7C411CD97391754DCF099C3E19DC73676D3847BDF1D83F545BFA6CD659840F012B2A8BD94CE20C49864514E90D491B4854935AA89CC8C1057BE52C2BCFA21EC94689C1DDFC25E139FBDC2018C8DB007DBB337A3E6E7E829D9FA9B05BBC0DBF454E4A9D8B352E251A6447C1FA58F4FC27E5A3DB6E0CC70147D2ACC029B9121E9CADFD7F894F5DA50E54D8893BFC412A122C9D29D029C9B1F19562BEB9870C771BCD
89B475D1FB13F80497F147621F3A483134B54A79BB26190A35FD35BC3EE6A7CB9CEA54089DE5D4D176826CCDAF82F94397F877F60E1394266856AB1685F77004C87B43A38515A47DAA97670270B21BE74F36CDE4CFC7C158D74F340D76AB30E29DDBB6A3E4A2EC48434E44E6C91800B87F42BC694CD11C77E5CED80BE3F4D0698D41F51104DACC0B193819A9ED50CB0D19255FCAB9720EEC15B43DBA29D18CA416034294C014D4CF9B409E50BB3DE78D644DEE84C7AB5ECF9899EB4A5B2ADCB2FF19640D2FAEEFB1778C2934894E22A8A1F97AA7E897D26CDCD38D620B782BE9344C8F794A33E41A5413083463AEAA5119C950B49ACE1077E4D48592EE74C787D798A106D65522CEA4E500F19C92CFE431EE492E1D7AEDA63265F5AD7CC25C122A1A2797EF87FAD90FB07C375A1BC52A25E67A9A4DB935535053CE14CB14F1E16336EE0807AA922500A0C7BC146BC032EBFF9CE68A667916BE503F33CC5082B06E6D5D86EC9E9FE00D4CB19EAAC941C930AA23111C4ADE0445AA4D314A6009F3143FB41873A56D24FFBD5E73435F9C4AEB0BB0C81CF7AC38E0625574F2F93F57E3DC291A2B2BDDE2F7BB88AD5834E5A6CF066908C6B213C8F5EDDA163400E34933A86375013445098B60B03BD1877363652956E763DCC9D1C3DCE761169A86DDFF0272DAA31729BC2ABF5EEF04FEB87B2B137AFA7C0D42FCAD2F53E9E2AECC10E35C88356BBC1B9C034CD0AEE9CCE3C296495C54AC2F983A68252F52DE25BAC9F28A57878483FA14C95DE57FDB6C2F2EBED9014A31374782B015CF69A34843A7166349EB55DA6818D4577D75CD962A0CE7C20DB68FB0E7982C7004861985A1257F38330C3DC0AB74EBEA5BD29A853A69B5FAE8416CD4FB187592B8553A35714F92BE5BA9A05FA50BE49F6F6E81E49B88B34B1519926FF6ADE0EB67852BC8685479EC33189241B1AD42E171ED8E843084639EDFF03C6401F4554A0F5BE3270B3AC2F44F8EADEB997B00CF4A0D61378B3AB5EED78A840C8176415824B24C69FE679FD7D8C886ED34F68F9E03CC90A68B397611281711711B7D3C5877932D4F0263E32A3D14E617150CA74C0E854D7B31E487A493DF95C3D17D85769F3784B643C987303A6F618421B06A8D69F57E059876E441D737A61863A756A4A6CF0ED17ABDF1C265D4AB6347A2A7FFD93BC603DBD394FF2BF19A05D23A3347BEA497911FF3D0F9743D22A4490FBD142E3559C26E40BCF0F48FBF17A1C8C358843486B020F2DFABFB692406AE8E088C207BFB5DF959B6391E766B18D5BB271D24566DCCC5322C14E1BA0C21BF6EF1EB5448F4E04373CB09AFF2CC156155DE7431C5B83A1053B2565F4530C4350DF0AFEEC82A0D71EA44C4393F02FF0807D8B4B8C8BA0B83139CB795E2803ACE8C685BD46F86C6E69158626A7109959767ABE5A85313600D0C

DFE80F1C4F115504B51BD43F004C1B462F6358857AE74625
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs3 exch/ColorSpace dr pop
%%EndPageSetup
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
q
0 0 173 157 rc
1 0 0 -1 -457 452 cm
541.47974 349.13455 m
541.56415 328.40671 l
S
0 J
0 j
0 i
543.64648 327.55408 m
542.49371 328.69751 540.6322 328.68994 539.48877 327.53714 c
538.34528 326.38434 538.35284 324.52286 539.50568 323.37939 c
540.65851 322.23593 542.51996 322.2435 543.66345 323.3963 c
544.80688 324.5491 544.79932 326.41061 543.64648 327.55408 c
S
1 J
1 j
0.60000002 i
540.159 424.15225 m
540.159 437.95029 l
S
0 J
0 j
0 i
538.08014 438.81137 m
539.22827 437.66324 541.08978 437.66324 542.23792 438.81137 c
543.38605 439.95953 543.38605 441.82104 542.23792 442.96918 c
541.08978 444.11731 539.22827 444.11731 538.08014 442.96918 c
536.93201 441.82104 536.93201 439.95953 538.08014 438.81137 c
S
1 J
1 j
0.60000002 i
540.08997 433.06903 m
464.30417 433.79874 l
461.54288 433.82535 459.28284 431.60843 459.25626 428.84711 c
459.2561 428.83109 459.25604 428.81503 459.25604 428.79898 c
459.25604 422.70865 l
S
495.06876 349.38452 m
464.71805 349.38452 l
461.95663 349.38452 459.71805 351.62311 459.71805 354.38452 c
459.71805 363.9649 l
S
[
1
4
] 0 d
0.40000001 0.40000001 0.40000001 sc
459.70648 353.29807 m
459.25604 422.70865 l
S
[] 0 d
0 0 0 sc
612.52118 361.78403 m
612.52118 423.65225 l
467.79688 423.65225 l
467.79688 361.78403 l
h
612.52118 361.78403 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 83.271637 83.879242 cm
/F1.1[ 12 0 0 -12 0 0]sf
-3.5580001 3.8320007 m
(!)s
/Cs1 SC
0.69411767 0 0.10980392 sc
1 0 0 -1 130.09993 141.19026 cm
/F1.1[ 16 0 0 -16 0 0]sf
-5.632 5.776001 m
(")s
0.69411999 0 0.1098 sc
1 0 0 -1 39.58025 141.19026 cm
-5.184 5.776001 m
(#)s
1 0 0 -1 83.271637 141.19026 cm
-6.072 5.776001 m
($)s
/Cs2 SC
0 sc
1 0 0 -1 86.387337 43.046692 cm
/F1.1[ 10 0 0 -10 0 0]sf
-36.955002 3.8600006 m
(!%&'!\(\)*+,*&-.&\()[ 5.930000 3.890000 3.150000 5.000000 5.930000 5.370000 2.780000 5.000000 5.560000 5.930000 5.000000 3.150000 3.330000 5.370000 3.150000 0.000000 ] xS
/Cs1 SC
0.40784299 0.73725498 0.21176501 sc
CM
118.59171 73.580147 m
50.226238 73.332802 l
50.226238 73.332802 48.12059 72.822258 48.241985 75.806259 c
48.241985 90.152321 l
29.08025 90.215981 l
29.08025 61.212856 l
29.08025 60.106728 30.029785 59.091629 32.125988 59.091629 c
135.14696 59.091629 l
136.55605 59.091629 138.96126 59.228138 138.96126 60.965511 c
139.23412 90.215981 l
120.85942 90.215981 l
120.85942 76.053604 l
121.09357 73.411835 118.59171 73.580147 118.59171 73.580147 c
h
118.59171 73.580147 m
f
0.80000001 w
0.60000002 i
0 0 0 sc
1 0 0 -1 -457 452 cm
575.59167 378.41986 m
507.22623 378.66721 l
507.22623 378.66721 505.12061 379.17773 505.24197 376.19373 c
505.24197 361.84769 l
486.08026 361.78403 l
486.08026 390.78714 l
486.08026 391.89328 487.02979 392.90836 489.12598 392.90836 c
592.14697 392.90836 l
593.55603 392.90836 595.96124 392.77185 595.96124 391.03448 c
596.23413 361.78403 l
577.85944 361.78403 l
577.85944 375.94638 l
578.09357 378.58817 575.59167 378.41986 575.59167 378.41986 c
h
575.59167 378.41986 m
S
0 i
CM
61.962139 102.61546 m
106.96214 102.61546 l
106.96214 94.455643 l
61.962139 94.455643 l
h
61.962139 102.61546 m
f
0.5 w
0.60000002 i
1 0 0 -1 -457 452 cm
518.96216 349.38452 m
563.96216 349.38452 l
563.96216 357.54434 l
518.96216 357.54434 l
h
518.96216 349.38452 m
S
0 i
CM
125.74166 98.701942 m
134.45821 98.701942 l
134.45821 90.215981 l
125.74166 90.215981 l
h
125.74166 98.701942 m
f
0.60000002 i
1 0 0 -1 -457 452 cm
582.74164 353.29807 m
591.45819 353.29807 l
591.45819 361.78403 l
582.74164 361.78403 l
h
582.74164 353.29807 m
S
0 i
CM
34.749542 98.701942 m
43.46608 98.701942 l
43.46608 90.215981 l
34.749542 90.215981 l
h
34.749542 98.701942 m
f
0.60000002 i
1 0 0 -1 -457 452 cm
491.74954 353.29807 m
500.46606 353.29807 l
500.46606 361.78403 l
491.74954 361.78403 l
h
491.74954 353.29807 m
S
1 w
586.59991 352.90979 m
586.59991 328.26846 l
S
0 J
0 j
0 i
588.67883 327.40738 m
587.5307 328.55551 585.66919 328.55551 584.52106 327.40738 c
583.37292 326.25922 583.37292 324.39771 584.52106 323.24957 c
585.66919 322.10144 587.5307 322.10144 588.67883 323.24957 c
589.82697 324.39771 589.82697 326.25922 588.67883 327.40738 c
S
1 J
1 j
0.60000002 i
495.60782 352.90979 m
495.60782 328.26846 l
S
0 J
0 j
0 i
497.68671 327.40738 m
496.53857 328.55551 494.67706 328.55551 493.52893 327.40738 c
492.38077 326.25922 492.38077 324.39771 493.52893 323.24957 c
494.67706 322.10144 496.53857 322.10144 497.68671 323.24957 c
498.83484 324.39771 498.83484 326.25922 497.68671 327.40738 c
S
/Cs3 SC
0.10733162 0.27396923 0.0013213585 sc
1 0 0 -1 84.157181 66.890503 cm
-22.23 3.8600006 m
(/%01.//\(2)[ 5.560000 3.890000 5.370000 5.560000 5.370000 5.560000 5.560000 5.370000 0.000000 ] xS
/Cs2 SC
0 sc
1 0 0 -1 112.04044 11.745387 cm
-21.67 3.8600006 m
(#+,*&-.&\(\))[ 6.480000 5.560000 5.930000 5.000000 3.150000 3.330000 5.370000 3.150000 5.370000 0.000000 ] xS
/Cs3 SC
42 0 0 28 108 95 cm
BI
/Width 126
/Height 84
/BitsPerComponent 8
/Decode[
0 1
0 1
0 1
]
/DataSource cg_aiproc
ID
JcE[gr_31hrj0cIL];r*`;fg1qZ-W%b5[7sJcE[gr_31hrj0cIL];r*`;fg1qZ-W%b5[7sJcE[gr_31h
rj0cIL];r*`;fg1qZ-W%b5[7sJcE[gr_31hrj0cIL];r*`;fg1qZ-W%b5[7sJcE[gr_31hrj0cIL];r*
`;fg1qZ-W%b5[7sJcE[gr_31hrj0cIL];r*`;fg1qZ-W%b5[7sJcE[gr_31hrj0cI`rGi3q"XX`h>`'+
`;fg1qZ-W%b5]K]q#'p^q#9+LJcE[gr_31hrj0cI`rGi3q"XX`h>`'+`;fg1qZ-W%b5]ffq"XXMq!.YO
h>`'+`;fg1qZ-W%b5]ffq"XXMq!.YOh>`'+`;fg1qZ-W%b5]ffq"XXMq!.YOh>`'+`;fg1qZ-W%b5^H#
q#:'^puM5+q!n.Yh>`'+`;fg1qZ-W%b5^H#q#:'^puM5+q!n.Yh>`'+`;fg1qZ-W%b5^H#q#:'^puM5+
q!n.Yh>`'+`;fg1qZ-W%b5^c,q#:'\pu2#(q!e(VeGk+"`;fg1qZ-W%b5^c,q#:'\pu2#(q!e(VeGk+"
`;fg1qZ-W%b5^c,q#:'\pu2#(q!e(VeGk+"`;fg1qZ-W%b5_)5q#'pWptkf(q"+:ZbQ!.n`;fg1qZ-W%
b5_)5q#'pWptkf(q"+:ZbQ!.n`;fg1qZ-W%b5_)5q#'pWptkf(q"+:ZbQ!.n`;fg1qZ-W%b5_D>q"sjR
ptYZ)q"FL^_Z,2e`;fg1qZ-W%b5_D>q"sjRptYZ)q"FL^_Z,2e`;fg1qZ-W%b5_D>q"sjRptYZ)q"FL^
_Z,2e`;fg1qZ-W%cN!k=r;$-PptPT,q"V)nJcE[gr_31hrj0oMrV?Beq!%S.puhGIYlB:S`;fg1qZ-W%
cN!k=r;$-PptPT,q"V)nJcE[gr_31hrj1P_q#:'_rT3t=ptPT0q"gogJcE[gr_31hrj1P_q#:'_rT3t=
ptPT0q"gogJcE[gr_31hrj1P_q#:'_rT3t=ptPT0q"gogJcE[gr_31hrj1khq#:'\pu;8.r8%/:q"pZ_
JcE[gr_31hrj1khq#:'\pu;8.r8%/:q"pZ_JcE[gr_31hrj1khq#:'\pu;8.r8%/:q"pZ_JcE[gr_31h
rj21qq#1!Xn)+*7r:9X]Q2cF8`;fg1qZ-W%o)JL`q!mh1rUTmWq#-KXJcE[gr_31hrj21qq#1!Xn)+*7
r:9X]Q2cF8`;fg1qZ-W%qu?Hgq!Rq4puD/BrVl`oN;nJ/`;fg1qZ-W%qu?Hgq!Rq4puD/BrVl`oN;nJ/
`;fg1qZ-W%qu?Hgq!Rq4puD/BrVl`oN;nJ/`;fg1qZ-Vuqt^$PptPT+q"OF\L];r*`;fg1qZ-Vuqt^$P
ptPT+q"OF\L];r*`;fg1qZ-Vuqt^$PptPT+q"OF\L];r*`;fg.qZ-Vhqr[\.q!.YMli2b?JcE[gr^lte
rh95OptPT/q"a7UL];r*`;fg.qZ-Vhqr[\.q!.YMli2b?JcF=$q#:']r^6P_rgN`>q!RqSir=f6JcF=$
q#:']r^6P_rgN`>q!RqSir=f6JcF=$q#:']r^6P_rgN`>q!RqSir=f6JcFX-q#1!Yptu';qZ-VpqsjI[
g&Hj-JcFX-q#1!Yptu';qZ-VpqsjI[g&Hj-JcFX-q#1!Yptu';qZ-VpqsjI[g&Hj-JcFs6q"sjTptb`)
r^cndrj)G#d/Sn$JcFs6q"sjTptb`)r^cndrj)G#d/Sn$JcFs6q"sjTptb`)r^cndrj)G#d/Sn$JcG9?
q"jdOptPT*q"Ob\qZ-W%b5[7sJcG9?q"jdOptPT*q"Ob\qZ-W%b5[7sJcG9?q"jdOptPT*q"Ob\qZ-W%
b5[7sJcGTHq"XXIptPT.q"a^br_31hrj0cIL];r*qZ$?cpuhG,q!%SLq#C=eqZ-W%b5[7sJcGTHq"XXI
ptPT.q"a^br_31hrj0cIL]<>5q#:'^puD/)q!IkRn,NA\qZ-W%b5[7sN;r\Pq"FLCptYZ3q"sO[r_31h
rj0cIL]<>5q#:'^puD/)q!IkRn,NA\qZ-W%b5[7sQ2gXXq"+:=ptkf9q#':Sr_31hrj0cIL]<Y>q#1!Z
pu(r(q!n.Wk5YESqZ-W%b5[7sQ2gXXq"+:=ptkf9q#':Sr_WIlrjU&ML]<tGq#'pUptb`(q"4@\rr;uC
r[6hNrY5>3rWE-@h&u\qrqc9eL]<tGq#'pUptb`(q"4@\rr;tCYQ4[\o`'^HT)\T`q!\"6pu2#?q#:9m
rd"JDZN1!_o`'^HVuQPgq!@e2puV;Eq#9sdrd"JDZN1!_o`'^HVuQPgq!@e2puV;Eq#9sdrd"JDZN1!_
o`'^HVuQPgq!@e2puV;Eq#9sdrd"JDZN1!_o`'^H_Z0E0q"ORWpuqM-q!%SLj8]+(rW0>*ro!GKL]>6k
q#1!^q"FLHptPT.q"`tMrd"JDZN1!_o`'^H_Z0E0q"ORWpuqM-q!%SLj8]+(rW0>*ro!GKL]>Qtq#:'X
pso/lpt>H/q"reFrd"JDZN1!_o`'^HbQ%A:q!e(/pt5Apq!@eQgAh.trW0>*ro!GKL]>Qtq#:'Xpso/l
pt>H/q"reFrd"JDZN1!_o`'^HJ,
~> %APLeod
EI
104 0 0 5 46 90 cm
BI
/Width 312
/Height 15
/BitsPerComponent 8
/Decode[
0 1
0 1
0 1
]
/DataSource cg_aiproc
ID
JcGBBrZ71%JH16$hZ3WXra!MCq"XX=pr<*OpuD/GdJs2krW1CHirK):JcGTHq#C-Gk5Y55k5Y55k5Y55
o)J\]p`]D4jrsL"jrsL"lQQ0Lp]0G"p]0G"p]0G"p]0G"p]0G"p]0G"p]0J#!$V+;jrs_2qqgK8ptkK>
q"XWups&T\pu_A)dJs2krW1CHirK):JcGTHq#C*hk5Y2Vk5Y2Vk5Y2Vk5Y2Vk5Y2Vk5Y2Vli6n_p]0IV
p]0IVp]0IVp]0IVp]0IVp]0IVp]0LW!<;fok5Y2Vk5Y2Vk5Y2Vk5Y2VdJs2krW1CHirK):JcGTHrr;si
rW)*\p]0IVp]0IVp]0IVp]0IVp]0IVp]0IVr;c`qk5Y2Vk5Y2Vk5Y2Vk5Y2Vk5Y2Vk5Y2Vk5Y5W!!)0]
p]0IVp]0IVp]0IVp]0IVqZ-W:m/R'1rW1CHirK):JcGTHrr;sirW)*\p]0IVp]0IVp]0IVp]0IVp]0IV
p]0IVr;c`qk5Y2Vk5Y2Vk5Y2Vk5Y2Vk5Y2Vk5Y2Vk5Y5W!!)0]p]0IVp]0IVp]0IVp]0IVqZ-W:m/R'1
rW1CHirK):JcGTHrr;sirW)*\p]0IVp]0IVp]0IVp]0IVp]0IVp]0IVr;c`qk5Y2Vk5Y2Vk5Y2Vk5Y2V
k5Y2Vk5Y2Vk5Y5W!!)0]p]0IVp]0IVp]0IVp]0IVqZ-W:m/R'1rW1CHirK):JcGTHk5Y2Vk5Y2Vk5Y2V
k5Y2Vk5Y2Vk5Y2Vk5Y2VrVu0_p]0IVp]0IVp]0IVp]0IVp]0IVp]0IVp]1-imf3%^k5Y2Vk5Y2Vk5Y2V
k5Y2Vj8]+(rW1CHirK):JcGTHk5Y2Vk5Y2Vk5Y2Vk5Y2Vk5Y2Vk5Y2Vk5Y2VrVu0_p]0IVp]0IVp]0IV
p]0IVp]0IVp]0IVp]1-imf3%^k5Y2Vk5Y2Vk5Y2Vk5Y2Vj8]+(rW1CHirK):JcGTHk5Y2Vk5Y2Vk5Y2V
k5Y2Vk5Y2Vk5Y2Vk5Y2VrVu0_p]0IVp]0IVp]0IVp]0IVp]0IVp]0IVp]1-imf3%^k5Y2Vk5Y2Vk5Y2V
k5Y2Vj8]+(rW1CHirK):JcGTHn,N._k5Y2Vk5Y2Vk5Y2Vk5Y2Vk5Y2Vk5Y2Vo`+O_p]0IVp]0IVp]0IV
p]0IVp]0IVp]0IVp]0g`p](!gk5Y2Vk5Y2Vk5Y2Vk5Y2VgAh.trW1CHirK):JcGTHn,N._k5Y2Vk5Y2V
k5Y2Vk5Y2Vk5Y2Vk5Y2Vo`+O_p]0IVp]0IVp]0IVp]0IVp]0IVp]0IVp]0g`p](!gk5Y2Vk5Y2Vk5Y2V
k5Y2VgAh.trW1CHirK):JcGTHn,N._k5Y2Vk5Y2Vk5Y2Vk5Y2Vk5Y2Vk5Y2Vo`+O_p]0IVp]0IVp]0IV
p]0IVp]0IVp]0IVp]0g`p](!gk5Y2Vk5Y2Vk5Y2Vk5Y2VgAh.trW1CHirK):JcGTHrn@ADrr;`nk5Y2V
k5Y2Vk5Y2Vk5Y2Vk5Y2Vk5Y2Vli6n_p]0IVp]0IVp]0IVp]0IVp]0IVp]0IVp]0LW!<;fok5Y2Vk5Y2V
k5Y2Vk5Y2Vl2UbAm+VGOrW1CHirK(nJ_KtSrW)r*rr;`nk5Y2Vk5Y2Vk5Y2Vk5Y2Vk5Y2Vk5Y2Vli6n_
p]0IVp]0IVp]0IVp]0IVp]0IVp]0IVp]0LW!<;fok5Y2Vk5Y2Vk5Y2Vk5Y2Vl2U`A[K(jYf`;!OrYPPW
p]0G"p]0G"p]0G"p]0G"p]0G"p]0G"p]0V'r#th8jrsL"jrsL"jrsL"jrsL"jrsL"jrsL"k90gKp]0G"
p]0G"p]0G"p]0G"p]0P%rWfk3JH4@'J,
~> %APLeod
EI
42 0 0 4 108 86 cm
BI
/Width 126
/Height 12
/BitsPerComponent 8
/Decode[
0 1
0 1
0 1
]
/DataSource cg_aiproc
ID
OsU):rW%EU'*^<q*]7"?2-1hV<us5#*]7"?2-1hV<us5#*]7"?2-1hV<us5#*\^A/02<E=:)Yc\)D=i(
02<E=:)Yc\)D=i(02<E=:)Yc\)D=i(02<E=:)Yc\)D=i(02<E=:)Yc\)D=i(02<E=:)Yc\)D=i(02<E@
;]IYr*]7"+*]7"?2-1hV<us47<us5#*]7"?2-1hV<us5#*]7"?)Cl?t!<*(r-'J<-@/^.U)Cl>C`'nph
7<la>Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf3$q`'nph7<la>
Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf3$q`'nph$:T3X7<la>
Gf3$q(;rXd`'nph7<la>Gf3$q`'nph76+ZtrW)p=V#QVXra>^*Ii9gJGf3$q`'nph7<la>Gf3$q`'nph
7<la>Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf3$q`'nph7<la>
Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf3$q`!SqX`'nph7<la>GS\4dGf3$q`'nph
7<la>Gf3$q`'lXj+T;B?+Jf%#s8HF*!.Pn;%sZ#]Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf3$q`'nph
7<la>Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf3$q`'nph7<la>
Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf0qXGf3$q`'nph7<fTd7<la>Gf3$q`'nph7<la>Gf3$0=s*_D
rZ\0<P5kMhrW%Ed.h?mC7<la>Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf3$q`'nph
7<la>Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf3$q`'nph7<la>
Gf3$q`'nph7<l`X7<la>Gf3$q`'nnd`'nph7<la>Gf3$q`'nph7<la>2H_.$!<+:?s-!E]@/^.U)Cl>C
`'nph7<la>Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf3$q`'nph
7<la>Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf3$q`'nph$:T3X
7<la>Gf3$q(;rXd`'nph7<la>Gf3$q`'nph75\*erW)pFV#QVXra>^*Ii9gJGf3$q`'nph7<la>Gf3$q
`'nph7<la>Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf3$q`'nph
7<la>Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf3$q`!SqX`'nph7<la>GS\4dGf3$q
`'nph7<la>Gf3$q`'lL_*rZ0=.]!*-s8HF*!.Pn;%sZ#]Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf3$q
`'nph7<la>Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf3$q`'nph
7<la>Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf0qXGf3$q`'nph7<fTd7<la>Gf3$q`'nph7<la>Gf3$,
;]Yi;r[alFP5kMhrW%Ed.h?mC7<la>Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf3$q
`'nph7<la>Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf3$q`'nph
7<la>Gf3$q`'nph7<l`X7<la>Gf3$q`'nnd`'nph7<la>Gf3$q`'nph7<la>0i8qi!<+UHs-!E]@/^.U
)Cl>C`'nph7<la>Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf3$q
`'nph7<la>Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf3$q`'nph
$:T3X7<la>Gf3$q(;rXd`'nph7<la>Gf3$q`'nph75.LWrW)pPV#QVXra>^*Ii9gJGf3$q`'nph7<la>
Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf3$q
`'nph7<la>Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf3$q`!SqX`'nph7<la>GS\4d
Gf3$q`'nph7<la>Gf3$q`'l=R)u]j:1Sk&6s8HF*!.Pn;%sZ#]Gf3$q`'nph7<la>Gf3$q`'nph7<la>
Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf3$q
`'nph7<la>Gf3$q`'nph7<la>Gf3$q`'nph7<la>Gf0qXGf3$q`'nph7<fTd7<la>Gf3$q`'nph7<la>
Gf3$'9H*m1r\^MOJ,
~> %APLeod
EI
0.69999999 w
1 J
1 j
0.60000002 i
/Cs1 SC
0 0.21568628 0.4627451 sc
1 0 0 -1 -457 452 cm
503.3858 357.54434 m
579.82196 357.54434 l
579.82196 361.78732 l
503.3858 361.78732 l
h
503.3858 357.54434 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 42.673004 12.716444 cm
/F1.1[ 7 0 0 -7 0 0]sf
-31.632999 2.9020004 m
(3/&\(-/.22'\)04//\(0&\(5)[ 1.554000 3.892000 2.205000 3.759000 2.457000 3.892000 3.759000 1.554000 1.554000 3.500000 1.946000 3.759000 4.018000 3.892000 3.892000 3.759000 3.759000 2.205000 3.759000 0.000000 ] xS
/Cs1 SC
0 0.21568628 0.4627451 sc
1 0 0 -1 154.59993 121.44617 cm
/F1.1[ 10 0 0 -10 0 0]sf
-8.1499996 3.8600006 m
(#36)[ 6.480000 2.220000 0.000000 ] xS
1 0 0 -1 165.22429 118.54527 cm
/F1.1[ 7 0 0 -7 0 0]sf
-1.946 2.9020004 m
(7)s
1 w
0.60000002 i
1 0 0 -1 -457 452 cm
601.62939 332.39334 m
574.41125 355.24054 l
S
0 i
CM
114.96029 94.702095 m
118.18276 95.840347 l
116.63974 97.678574 l
h
114.96029 94.702095 m
f
0 J
0 j
1 0 0 -1 -457 452 cm
571.96027 357.29791 m
575.18274 356.15964 l
573.63971 354.32141 l
h
571.96027 357.29791 m
S
ep
end
%%Trailer
%%EOF
